===========================
How to Use 0-add_integer.py
===========================

This module contains a single function that defines an integer addition function ``add_integer(a, b=98)``.

``add_integer(a, b)``` returns the addition of its two arguments. equivalent to using the ``+`` operator.

argument  b has default value of 98, it is optional.
::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -2)
    0

::

    >>> add_integer(-2)
    96

Arguement may be floats which can be casted to int.

::

    >>> add_integer(2.0, 3.0)
    5

::

    >>> add_integer(-2.9, -0.2)
    -2

::

    >>> add_integer(2.3)
    100



Non-Numbers
===========

If a non number object eg, strings, List, Turple or float('inf') or float()

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer


::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    TypeError: a must be an integer
     

::

    >>> add_integer(3, float('inf'))
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(3, float('nan'))
    Traceback (most recent call last):
    TypeError: b must be an integer